# Recolección API GitHub - Backend

Este documento explica el funcionamiento del código que se encarga de interactuar con la API de GitHub para obtener información sobre usuarios, organizaciones, repositorios, contribuciones, commits y lenguajes dominantes.

## Descripción General

El objetivo de este código es realizar varias consultas a la API de GitHub utilizando la librería `httpx`, que permite realizar solicitudes HTTP de manera asíncrona. Las funciones definidas aquí permiten obtener datos como la información de usuario, repositorios de una organización, contribuyentes de un repositorio, commits, lenguajes dominantes, y el total de estrellas que un usuario ha recibido en sus repositorios.

## Dependencias

Este código depende de las siguientes bibliotecas:

- `httpx`: Utilizada para realizar solicitudes HTTP asíncronas.
- `logging`: Utilizada para registrar mensajes de información y errores.
- `SQLAlchemy`: Utilizada para la interacción con la base de datos.
- `backend.models.GitHubUserModel`: El modelo que representa a un usuario de GitHub en la base de datos.

## Código

### Configuración de Logging y Token de GitHub

```python
import logging

# Configuración de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Tu token de autenticación de GitHub
GITHUB_TOKEN = 'XXXXXXXXXXXXXXXXX'
```

El código comienza configurando el sistema de logging para registrar los mensajes de información y error, y definiendo un token de autenticación de GitHub que se usará en todas las solicitudes.

## Funciones para Interactuar con la API de GitHub

1. Obtener Información de Usuario de GitHub

```{eval-rst}
.. autofunction:: requestgithub.fetch_github_user
```


```python
async def fetch_github_user(username: str) -> dict:
    url = f"https://api.github.com/users/{username}"
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}'
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
    except httpx.HTTPStatusError as e:
        logger.error(f"GitHub API error: {e.response.status_code} for user {username}")
        raise
    except Exception as e:
        logger.error(f"Error fetching GitHub user: {e}")
        raise
```
 Esta función recupera la información básica de un usuario de GitHub a partir de su nombre de usuario. Realiza una solicitud GET a la API de GitHub y devuelve un diccionario con los detalles del usuario, como nombre, avatar, y URL de perfil. Si ocurre un error durante la solicitud, se captura y se registra.

2. Obtener Repositorios de una Organización

```{eval-rst}
.. autofunction:: requestgithub.fetch_github_org_repos
```

```python
async def fetch_github_org_repos(org: str) -> List[dict]:
    url = f"https://api.github.com/orgs/{org}/repos"
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}'
    }
    repos = []
    page = 1

    try:
        async with httpx.AsyncClient() as client:
            while True:
                response = await client.get(url, headers=headers, params={"per_page": 100, "page": page})
                response.raise_for_status()
                page_repos = response.json()

                if not page_repos:
                    break

                repos.extend(page_repos)
                page += 1

        return repos
    except httpx.HTTPStatusError as e:
        logger.error(f"GitHub API error: {e.response.status_code} for org {org}")
        raise
    except Exception as e:
        logger.error(f"Error fetching GitHub organization repos: {e}")
        raise
```
Recupera todos los repositorios públicos de una organización específica en GitHub. La función maneja la paginación para obtener todos los repositorios en caso de que haya más de 100 repositorios. Devuelve una lista de diccionarios, cada uno representando un repositorio. Captura y registra cualquier error que ocurra durante la solicitud.

3. Obtener Contribuyentes de un Repositorio

```{eval-rst}
.. autofunction:: requestgithub.fetch_github_repo_contributors
```

```python
async def fetch_github_repo_contributors(org: str, repo: str) -> List[dict]:
    url = f"https://api.github.com/repos/{org}/{repo}/contributors"
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}'
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
    except httpx.HTTPStatusError as e:
        logger.error(f"GitHub API error: {e.response.status_code} for repo {repo}")
        raise
    except Exception as e:
        logger.error(f"Error fetching GitHub repo contributors: {e}")
        raise
```
Obtiene una lista de contribuyentes para un repositorio específico dentro de una organización en GitHub. Devuelve una lista de diccionarios con los detalles de cada contribuyente. La función maneja y registra los errores que puedan ocurrir durante la solicitud a la API.

4. Obtener Commits de un Repositorio

```{eval-rst}
.. autofunction:: requestgithub.fetch_github_repo_commits
```

```python
async def fetch_github_repo_commits(org: str, repo: str) -> List[dict]:
    url = f"https://api.github.com/repos/{org}/{repo}/commits"
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}'
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
    except httpx.HTTPStatusError as e:
        logger.error(f"GitHub API error: {e.response.status_code} for repo {repo}")
        raise
    except Exception as e:
        logger.error(f"Error fetching GitHub repo commits: {e}")
        raise
```
Recupera una lista de commits de un repositorio específico dentro de una organización en GitHub. Cada commit incluye detalles como el autor, mensaje del commit y fecha. Cualquier error durante la solicitud se captura y se registra.

5. Obtener Detalles de Usuario de GitHub

```{eval-rst}
.. autofunction:: requestgithub.fetch_github_user_details
```
```python
async def fetch_github_user_details(username: str) -> dict:
    url = f"https://api.github.com/users/{username}"
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}'
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
    except httpx.HTTPStatusError as e:
        logger.error(f"GitHub API error: {e.response.status_code} for user {username}")
        raise
    except Exception as e:
        logger.error(f"Error fetching GitHub user details: {e}")
        raise
```
Similar a fetch_github_user, esta función obtiene detalles adicionales de un usuario de GitHub utilizando su nombre de usuario. Devuelve un diccionario con información detallada del usuario y maneja los errores de manera similar.

6. Obtener Lenguaje Dominante de un Usuario

```{eval-rst}
.. autofunction:: requestgithub.fetch_user_dominant_language
```
```python
async def fetch_user_dominant_language(username: str) -> str:
    url = f"https://api.github.com/users/{username}/repos"
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}'
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            repos = response.json()

            language_stats = {}

            for repo in repos:
                repo_name = repo['name']
                owner = repo['owner']['login']

                # Fetch languages used in this repository
                lang_url = f"https://api.github.com/repos/{owner}/{repo_name}/languages"
                lang_response = await client.get(lang_url, headers=headers)
                lang_response.raise_for_status()
                languages = lang_response.json()

                for lang, bytes_count in languages.items():
                    if lang in language_stats:
                        language_stats[lang] += bytes_count
                    else:
                        language_stats[lang] = bytes_count

            if language_stats:
                # Find the language with the most bytes
                dominant_language = max(language_stats, key=language_stats.get)
                return dominant_language
            else:
                logger.warning(f"No languages found for user {username}")
                return None
    except httpx.HTTPStatusError as e:
        logger.error(f"GitHub API error: {e.response.status_code} for user {username}")
        return None
    except Exception as e:
        logger.error(f"Error fetching languages for user {username}: {e}")
        return None
 ```    

Determina el lenguaje de programación dominante utilizado por un usuario de GitHub en todos sus repositorios públicos. La función analiza todos los repositorios del usuario, suma los bytes de código por lenguaje, y devuelve el lenguaje más utilizado. Si no se puede determinar, devuelve None. También maneja y registra cualquier error durante la solicitud.

7. Obtener el Total de Estrellas de un Usuario

```{eval-rst}
.. autofunction:: requestgithub.fetch_github_user_stars
```

```python
async def fetch_github_user_stars(username: str) -> int:
    url = f"https://api.github.com/users/{username}/repos"
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}'
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            repos = response.json()
            
            # Sumar las estrellas de todos los repositorios
            total_stars = sum(repo['stargazers_count'] for repo in repos)
            return total_stars
    except httpx.HTTPStatusError as e:
        logger.error(f"GitHub API error: {e.response.status_code} for user {username}")
        raise
    except Exception as e:
        logger.error(f"Error fetching GitHub user stars: {e}")
        raise
```
Calcula el número total de estrellas que un usuario de GitHub ha recibido en todos sus repositorios públicos. La función suma las estrellas de todos los repositorios del usuario y devuelve el total. Captura y registra cualquier error que ocurra durante la solicitud a la API de GitHub.
